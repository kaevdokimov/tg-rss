package bot

import (
	"fmt"
	"strings"
	"time"
)

// formatNewsMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
func formatNewsMessage(title, description string, publishedAt time.Time, sourceName string) string {
	// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	trimmedDesc := trimDescription(description, 200)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
	relativeTime := formatRelativeTime(publishedAt)

	return fmt.Sprintf(
		"üì∞ *%s*\n\n%s\n\n‚è∞ %s \tüì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: %s",
		title, trimmedDesc, relativeTime, sourceName,
	)
}

// formatMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
func formatMessage(i int, title, description string, publishedAt time.Time, sourceName string) string {
	// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	trimmedDesc := trimDescription(description, 150)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
	relativeTime := formatRelativeTime(publishedAt)

	return fmt.Sprintf(
		"%d. üì∞ *%s*\n\n%s\n\n ‚è∞ %s \tüì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: %s\n\n",
		i, title, trimmedDesc, relativeTime, sourceName,
	)
}

// trimDescription –æ–±—Ä–µ–∑–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func trimDescription(description string, maxLength int) string {
	if len(description) <= maxLength {
		return description
	}

	// –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ maxLength
	trimmed := description[:maxLength]
	lastSpace := strings.LastIndex(trimmed, " ")
	if lastSpace > maxLength*3/4 { // –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
		trimmed = trimmed[:lastSpace]
	}

	return trimmed + "..."
}

// formatRelativeTime —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º –≤–∏–¥–µ
func formatRelativeTime(t time.Time) string {
	now := time.Now()
	duration := now.Sub(t)

	if duration < time.Minute {
		return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
	} else if duration < time.Hour {
		minutes := int(duration.Minutes())
		if minutes == 1 {
			return "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"
		} else if minutes < 5 {
			return fmt.Sprintf("%d –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥", minutes)
		} else {
			return fmt.Sprintf("%d –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥", minutes)
		}
	} else if duration < 24*time.Hour {
		hours := int(duration.Hours())
		if hours == 1 {
			return "1 —á–∞—Å –Ω–∞–∑–∞–¥"
		} else if hours < 5 {
			return fmt.Sprintf("%d —á–∞—Å–∞ –Ω–∞–∑–∞–¥", hours)
		} else {
			return fmt.Sprintf("%d —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥", hours)
		}
	} else if duration < 7*24*time.Hour {
		days := int(duration.Hours() / 24)
		if days == 1 {
			return "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥"
		} else if days < 5 {
			return fmt.Sprintf("%d –¥–Ω—è –Ω–∞–∑–∞–¥", days)
		} else {
			return fmt.Sprintf("%d –¥–Ω–µ–π –Ω–∞–∑–∞–¥", days)
		}
	} else {
		// –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
		return t.Format("02.01.2006 15:04")
	}
}
