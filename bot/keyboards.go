package bot

import (
	"fmt"
	"tg-rss/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// createMainKeyboard —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
func createMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "news"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "sources"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "add_source"),
			tgbotapi.NewInlineKeyboardButtonData("üìù –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "my_subscriptions"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)
	return keyboard
}

// createSourcesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
func createSourcesKeyboard(sources []db.Source) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, source := range sources {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üì∞ %s", source.Name),
				fmt.Sprintf("source_%d", source.Id),
			),
		)
		rows = append(rows, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	)
	rows = append(rows, backRow)

	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
}

// createSubscriptionKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
func createSubscriptionKeyboard(sourceId int64, isSubscribed bool) tgbotapi.InlineKeyboardMarkup {
	var action string
	var buttonText string

	if isSubscribed {
		action = "unsubscribe"
		buttonText = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
	} else {
		action = "subscribe"
		buttonText = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("%s_%d", action, sourceId)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", "sources"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
	return keyboard
}

// createAddSourceKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func createAddSourceKeyboard() tgbotapi.InlineKeyboardMarkup {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
		),
	)
	return keyboard
}

// createMySubscriptionsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func createMySubscriptionsKeyboard(subscriptions []db.Subscription, sources []db.Source) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ ID
	sourceMap := make(map[int64]db.Source)
	for _, source := range sources {
		sourceMap[source.Id] = source
	}

	for _, sub := range subscriptions {
		if source, exists := sourceMap[sub.SourceId]; exists {
			row := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚ùå %s", source.Name),
					fmt.Sprintf("unsubscribe_%d", sub.SourceId),
				),
			)
			rows = append(rows, row)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	)
	rows = append(rows, backRow)

	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
}
