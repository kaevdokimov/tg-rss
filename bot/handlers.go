package bot

import (
	"database/sql"
	"fmt"
	"log"
	"net/url"
	"strconv"

	"tg-rss/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// StartCommandHandler –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ Telegram
func StartCommandHandler(bot *tgbotapi.BotAPI, dbConn *sql.DB, interval int) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = interval

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
		if update.CallbackQuery != nil {
			log.Printf("[%s] Callback: %s", update.CallbackQuery.From.UserName, update.CallbackQuery.Data)
			handleCallback(bot, dbConn, update.CallbackQuery)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message == nil {
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				handleStart(bot, dbConn, update.Message.Chat.UserName, update.Message.Chat.ID)
			case "help":
				handleHelp(bot, update.Message.Chat.ID)
			case "add":
				handleAddSource(bot, dbConn, update.Message.Chat.ID, update.Message.CommandArguments())
			case "sources":
				handleShowSources(bot, dbConn, update.Message.Chat.ID)
			case "addsub":
				handleAddSubscription(bot, dbConn, update.Message.Chat.ID, update.Message.CommandArguments())
			case "delsub":
				handleDelSubscription(bot, dbConn, update.Message.Chat.ID, update.Message.CommandArguments())
			case "news":
				handleLatestNews(bot, dbConn, update.Message.Chat.ID, 10)
			default:
				handleUnknownCommand(bot, update.Message.Chat.ID)
			}
		} else {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
			handleTextMessage(bot, dbConn, update.Message)
		}
	}
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func handleStart(bot *tgbotapi.BotAPI, dbConn *sql.DB, username string, chatId int64) {
	var user = db.User{
		Username: username,
		ChatId:   chatId,
	}

	insertedId, err := db.SaveUser(dbConn, user)
	var errText string
	if err != nil {
		errText = fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		log.Print(errText)
		msg := tgbotapi.NewMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üò´")
		bot.Send(msg)
		return
	} else if insertedId != 0 {
		log.Printf("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId %d", insertedId)
		msg := tgbotapi.NewMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–æ—Ç—É! üéâ")
		bot.Send(msg)
	} else {
		errText = fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å chatId %d", user.ChatId)
		log.Print(errText)
		msg := tgbotapi.NewMessage(chatId, "–í—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É üòé")
		bot.Send(msg)
	}
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É", user.Username)

	msg := tgbotapi.NewMessage(chatId, "üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–æ–≤!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:")
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// handleAddSource –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func handleAddSource(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, link string) {
	if link == "" {
		msg := tgbotapi.NewMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	u, err := url.Parse(link)
	if err != nil {
		msg := tgbotapi.NewMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	var source = db.Source{
		Name: u.Host,
		Url:  link,
	}

	err = db.SaveSource(dbConn, source)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, fmt.Sprintf("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ [%s](%s) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", source.Name, source.Url))
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.DisableWebPagePreview = true
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)

	source, err = db.FindSourceActiveByUrl(dbConn, link)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	var subscription = db.Subscription{
		ChatId:   chatId,
		SourceId: source.Id,
	}

	err = db.SaveSubscription(dbConn, subscription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	successMsg := tgbotapi.NewMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	successMsg.ReplyMarkup = createMainKeyboard()
	bot.Send(successMsg)
}

// handleShowSources –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /sources –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
func handleShowSources(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64) {
	sources, err := db.FindActiveSources(dbConn)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}
	if len(sources) == 0 {
		msg := tgbotapi.NewMessage(chatId, "üìã –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫¬ª")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–µ–≥–æ")
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = createSourcesKeyboard(sources)
	bot.Send(msg)
}

// handleAddSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add-sub –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
func handleAddSubscription(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, sourceId string) {
	if sourceId == "" {
		msg := tgbotapi.NewMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add-sub")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	sourceIdInt, err := strconv.ParseInt(sourceId, 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(chatId, fmt.Sprintf("‚ùå ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ: %q.\n –£–∫–∞–∂–∏—Ç–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add-sub", sourceId))
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	_, err = db.FindActiveSourceById(dbConn, sourceIdInt)

	if err != nil {
		msg := tgbotapi.NewMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add-sub")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	var subscription = db.Subscription{
		ChatId:   chatId,
		SourceId: sourceIdInt,
	}

	err = db.SaveSubscription(dbConn, subscription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// handleDelSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /del-sub –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
func handleDelSubscription(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, sourceId string) {
	if sourceId == "" {
		msg := tgbotapi.NewMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delsub")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	sourceIdInt, err := strconv.ParseInt(sourceId, 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(chatId, fmt.Sprintf("‚ùå ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ: %q.\n –£–∫–∞–∂–∏—Ç–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delsub", sourceId))
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	_, err = db.FindActiveSourceById(dbConn, sourceIdInt)

	if err != nil {
		msg := tgbotapi.NewMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delsub")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	var subscription = db.Subscription{
		ChatId:   chatId,
		SourceId: sourceIdInt,
	}

	err = db.DeleteSubscription(dbConn, subscription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// handleLatestNews –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /news –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
func handleLatestNews(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, count int) {
	news, err := db.GetLatestNewsByUser(dbConn, chatId, count)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	if len(news) == 0 {
		msg := tgbotapi.NewMessage(chatId, "üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	// @ToDo: –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –±—É–∫–≤—ã –Ω–∞ –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ VSCode
	message := "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤ÔøΩÔøΩ—Å—Ç–∏:\n\n"
	for i, item := range news {
		message += formatMessage(i+1, item.Title, item.Link, item.Description, item.PublishedAt)
	}

	msg := tgbotapi.NewMessage(chatId, message)
	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = true
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
func handleHelp(bot *tgbotapi.BotAPI, chatId int64) {
	helpText := `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:*
/add <URL> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π RSS –∏—Å—Ç–æ—á–Ω–∏–∫
/sources - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:*
/addsub <ID> - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ ID
/delsub <ID> - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ ID

*–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π:*
/news - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
/add https://tass.ru/rss/v2.xml
/addsub 1
/delsub 1

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!`

	msg := tgbotapi.NewMessage(chatId, helpText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// handleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func handleTextMessage(bot *tgbotapi.BotAPI, dbConn *sql.DB, message *tgbotapi.Message) {
	text := message.Text
	chatId := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
	if isValidURL(text) {
		handleAddSource(bot, dbConn, chatId, text)
		return
	}

	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	msg := tgbotapi.NewMessage(chatId, "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// isValidURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL
func isValidURL(text string) bool {
	u, err := url.Parse(text)
	return err == nil && u.Scheme != "" && u.Host != ""
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func handleUnknownCommand(bot *tgbotapi.BotAPI, chatId int64) {
	msg := tgbotapi.NewMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}
