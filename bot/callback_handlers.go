package bot

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	"tg-rss/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func handleCallback(bot *tgbotapi.BotAPI, dbConn *sql.DB, callback *tgbotapi.CallbackQuery) {
	chatId := callback.Message.Chat.ID
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	bot.Send(callbackResponse)

	switch {
	case data == "main_menu":
		handleMainMenu(bot, chatId)
	case data == "news":
		handleLatestNews(bot, dbConn, chatId, 10)
	case data == "sources":
		handleShowSources(bot, dbConn, chatId)
	case data == "add_source":
		handleAddSourcePrompt(bot, chatId)
	case data == "my_subscriptions":
		handleMySubscriptions(bot, dbConn, chatId)
	case data == "help":
		handleHelp(bot, chatId)
	case strings.HasPrefix(data, "source_"):
		handleSourceDetails(bot, dbConn, chatId, data)
	case strings.HasPrefix(data, "subscribe_"):
		handleSubscribe(bot, dbConn, chatId, data)
	case strings.HasPrefix(data, "unsubscribe_"):
		handleUnsubscribe(bot, dbConn, chatId, data)
	default:
		handleUnknownCallback(bot, chatId)
	}
}

// handleMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func handleMainMenu(bot *tgbotapi.BotAPI, chatId int64) {
	msg := tgbotapi.NewMessage(chatId, "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}

// handleAddSourcePrompt –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func handleAddSourcePrompt(bot *tgbotapi.BotAPI, chatId int64) {
	msg := tgbotapi.NewMessage(chatId, "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL RSS-–ª–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ https://tass.ru/rss/v2.xml\n‚Ä¢ https://rss.cnn.com/rss/edition.rss")
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = createAddSourceKeyboard()
	bot.Send(msg)
}

// handleMySubscriptions –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleMySubscriptions(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64) {
	subscriptions, err := db.GetUserSubscriptionsWithDetails(dbConn, chatId)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
		bot.Send(msg)
		return
	}

	if len(subscriptions) == 0 {
		msg := tgbotapi.NewMessage(chatId, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n\n–î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏¬ª")
		msg.ReplyMarkup = createMainKeyboard()
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
	sources, err := db.FindActiveSources(dbConn)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, "üìù *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–µ–≥–æ")
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = createMySubscriptionsKeyboard(subscriptions, sources)
	bot.Send(msg)
}

// handleSourceDetails –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
func handleSourceDetails(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, data string) {
	parts := strings.Split(data, "_")
	if len(parts) != 2 {
		handleUnknownCallback(bot, chatId)
		return
	}

	sourceId, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		handleUnknownCallback(bot, chatId)
		return
	}

	source, err := db.FindActiveSourceById(dbConn, sourceId)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	isSubscribed, err := db.IsUserSubscribed(dbConn, chatId, sourceId)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		isSubscribed = false
	}

	var statusText string
	if isSubscribed {
		statusText = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫"
	} else {
		statusText = "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫"
	}

	msgText := fmt.Sprintf("üì∞ *%s*\n\nüîó %s\n\n%s", source.Name, source.Url, statusText)
	msg := tgbotapi.NewMessage(chatId, msgText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.DisableWebPagePreview = true
	msg.ReplyMarkup = createSubscriptionKeyboard(sourceId, isSubscribed)
	bot.Send(msg)
}

// handleSubscribe –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
func handleSubscribe(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, data string) {
	parts := strings.Split(data, "_")
	if len(parts) != 2 {
		handleUnknownCallback(bot, chatId)
		return
	}

	sourceId, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		handleUnknownCallback(bot, chatId)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	_, err = db.FindActiveSourceById(dbConn, sourceId)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	isSubscribed, err := db.IsUserSubscribed(dbConn, chatId, sourceId)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")
		bot.Send(msg)
		return
	}

	if isSubscribed {
		msg := tgbotapi.NewMessage(chatId, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫")
		bot.Send(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription := db.Subscription{
		ChatId:   chatId,
		SourceId: sourceId,
	}

	err = db.SaveSubscription(dbConn, subscription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫!")
	bot.Send(msg)
}

// handleUnsubscribe –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func handleUnsubscribe(bot *tgbotapi.BotAPI, dbConn *sql.DB, chatId int64, data string) {
	parts := strings.Split(data, "_")
	if len(parts) != 2 {
		handleUnknownCallback(bot, chatId)
		return
	}

	sourceId, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		handleUnknownCallback(bot, chatId)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	source, err := db.FindActiveSourceById(dbConn, sourceId)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription := db.Subscription{
		ChatId:   chatId,
		SourceId: sourceId,
	}

	err = db.DeleteSubscription(dbConn, subscription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatId, fmt.Sprintf("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ¬´%s¬ª", source.Name))
	bot.Send(msg)
}

// handleUnknownCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã
func handleUnknownCallback(bot *tgbotapi.BotAPI, chatId int64) {
	msg := tgbotapi.NewMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	msg.ReplyMarkup = createMainKeyboard()
	bot.Send(msg)
}
